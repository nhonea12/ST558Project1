[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(DBI)"
  },
  {
    "objectID": "Project1.html#summary-function",
    "href": "Project1.html#summary-function",
    "title": "ST 558 Project 1",
    "section": "Summary function",
    "text": "Summary function\nWe want to create a function a generic function for summarizing our data. A generic function will return different outputs for different classes given in the input. Our generic function will return weighted means and standard deviations given numeric variables from a tibble, and return counts in a one-way frequency table given categorical variables in from a tibble. We have given default values for our function, so it still returns summaries even when no arguments are given! Our function defaults to using our tibble where we have added \"census\" as a class. The default numeric variables that the function summarizes is every numeric variable except PWGTP (which is our weights), and the default categorical variables used are every categorical variable in our tibble. The values are returned in a list of length 2, with the first object in the list being our numeric summaries and the second object being the categorical summaries.\n\n# example tibble, to be deleted later\nyour_tibble &lt;- tibble(\n  SEX = as.factor(c(1, 2, 2, 1, 1)), \n  AGEP = c(25, 30, 76, 41, 55),\n  PWGTP = c(162, 128, 171, 223, 193)\n)\nyour_tibble\n\n# A tibble: 5 × 3\n  SEX    AGEP PWGTP\n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 1        25   162\n2 2        30   128\n3 2        76   171\n4 1        41   223\n5 1        55   193\n\n# add \"census\" to the classes of our tibble\nclass(your_tibble) &lt;- c(\"census\", class(your_tibble))\n\n\n# create a function to get summary statistics of variables from our census data\nsummary.census &lt;- function(tibble = your_tibble, \n                           num_vars = names(tibble |&gt; \n                             select(where(is.numeric), -PWGTP)), \n                           cat_vars = names(tibble |&gt; \n                             select(where(is.factor)))){\n  # create the summaries of numeric variables (get their weighted means and standard deviations)\n  num_list &lt;- tibble |&gt; \n    summarize(across(all_of(num_vars),\n            list(\"mean\" = ~ weighted.mean(.x, w = tibble$PWGTP, na.rm = TRUE), \n                 \"sd\" = ~ sqrt(weighted.mean((.x - weighted.mean(.x, tibble$PWGTP))^2, w = tibble$PWGTP))),\n            .names = \"{.fn}_{.col}\"))\n  \n  # create the summaries of categorical variables (get their counts in a one-way table)\n  cat_list &lt;- tibble |&gt; \n  group_by(across(all_of(cat_vars))) |&gt;\n  summarize(count = n())\n  \n  # return the summaries of both the numeric and character vectors\n  return(list(num_list, cat_list))\n}\n\n# call the summary function with default values\nsummary.census()\n\n[[1]]\n# A tibble: 1 × 2\n  mean_AGEP sd_AGEP\n      &lt;dbl&gt;   &lt;dbl&gt;\n1      46.3    17.8\n\n[[2]]\n# A tibble: 2 × 2\n  SEX   count\n  &lt;fct&gt; &lt;int&gt;\n1 1         3\n2 2         2"
  },
  {
    "objectID": "Project1.html#plot-function",
    "href": "Project1.html#plot-function",
    "title": "ST 558 Project 1",
    "section": "Plot function",
    "text": "Plot function\nWe also want to create a generic function for plotting our variables, specifically a box plot of a numeric variable grouped by a categorical variable. Our default data set is again the tibble with \"census\" as a class, but we have no default variables, so the user must specify them when calling the function. The tibble, numeric variable (titled num_var where we define our function), and categorical variable (titled cat_var) are the three arguments in our function. Once again, our numeric variable is being weighted, still by the PWGTP variable. The function will produce side-by-side box plots, with the number of box plots produced being the number of of levels to our categorical variable.\n\n# create a function to plot a categorical and numeric variable from our data in boxplots\nplot.census &lt;- function(tibble = your_tibble, num_var, cat_var){\nggplot(tibble, aes(x = get(cat_var), y = get(num_var), weight = PWGTP)) +\ngeom_boxplot()\n}\n\n# call the generic plotting function using AGEP as a numeric and SEX as a categorical\nplot.census(num_var = \"AGEP\", cat_var = \"SEX\")"
  }
]