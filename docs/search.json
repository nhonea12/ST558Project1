[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "In this project, we built custom R functions to pull and analyze census data from the American Community Survey (ACS) Public Use Microdata Sample (PUMS). We created a function to access the Census API, generic methods for summarizing and plotting the data, and a wrapper function to compare multiple years. Finally, we applied these functions to explore the working-age population of Illinois.\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(DBI)"
  },
  {
    "objectID": "Project1.html#summary-function",
    "href": "Project1.html#summary-function",
    "title": "ST 558 Project 1",
    "section": "Summary function",
    "text": "Summary function\nWe want to create a function a generic function for summarizing our data. A generic function will return different outputs for different classes given in the input. Our generic function will return weighted means and standard deviations given numeric variables from a tibble, and return counts in a one-way frequency table given categorical variables in from a tibble. We have given default values for our function, so it still returns summaries even when no arguments are given! Our function defaults to using our tibble where we have added \"census\" as a class. The default numeric variables that the function summarizes is every numeric variable except PWGTP (which is our weights), and the default categorical variables used are every categorical variable in our tibble. The values are returned in a list of length 2, with the first object in the list being our numeric summaries and the second object being the categorical summaries.\n\n# create a function to get summary statistics of variables from our census data\nsummary.census &lt;- function(tibble = test, \n                           num_vars = names(tibble |&gt; \n                             select(where(is.numeric), -PWGTP)), \n                           cat_vars = names(tibble |&gt; \n                             select(where(is.factor)))){\n  \n  num_list &lt;- tibble |&gt; \n    summarize(across(all_of(num_vars),\n            list(\"mean\" = ~ weighted.mean(.x, w = tibble$PWGTP, na.rm = TRUE), \n                 \"sd\"   = ~ sqrt(weighted.mean((.x - weighted.mean(.x, tibble$PWGTP))^2, \n                                              w = tibble$PWGTP))),\n            .names = \"{.fn}_{.col}\"))\n  \n  cat_list &lt;- tibble |&gt; \n    group_by(across(all_of(cat_vars))) |&gt;\n    summarize(count = n())\n  \n  return(list(num_list, cat_list))\n}\n\n# Run summary\nsummary(test)\n\n[[1]]\n# A tibble: 1 × 2\n  mean_AGEP sd_AGEP\n      &lt;dbl&gt;   &lt;dbl&gt;\n1      39.6    23.2\n\n[[2]]\n# A tibble: 2 × 2\n  SEX   count\n  &lt;fct&gt; &lt;int&gt;\n1 1     62720\n2 2     65326\n\nsummary.census()\n\n[[1]]\n# A tibble: 1 × 2\n  mean_AGEP sd_AGEP\n      &lt;dbl&gt;   &lt;dbl&gt;\n1      39.6    23.2\n\n[[2]]\n# A tibble: 2 × 2\n  SEX   count\n  &lt;fct&gt; &lt;int&gt;\n1 1     62720\n2 2     65326\n\n\nThis function provides weighted descriptive statistics for the numeric variables (mean and standard deviation) and frequency counts for the categorical variables. This allows us to quickly see the distribution of values in our dataset while properly accounting for census weights."
  },
  {
    "objectID": "Project1.html#plot-function",
    "href": "Project1.html#plot-function",
    "title": "ST 558 Project 1",
    "section": "Plot function",
    "text": "Plot function\nWe also want to create a generic function for plotting our variables, specifically a box plot of a numeric variable grouped by a categorical variable. Our default data set is again the tibble with \"census\" as a class, but we have no default variables, so the user must specify them when calling the function. The tibble, numeric variable (titled num_var where we define our function), and categorical variable (titled cat_var) are the three arguments in our function. Once again, our numeric variable is being weighted, still by the PWGTP variable. The function will produce side-by-side box plots, with the number of box plots produced being the number of of levels to our categorical variable.\n\nplot.census &lt;- function(tibble = test, num_var, cat_var){\n  ggplot(tibble, aes(x = get(cat_var), y = get(num_var), weight = PWGTP)) +\n    geom_boxplot()\n}\n\n# Example plot\nplot(test, num_var = \"AGEP\", cat_var = \"SEX\")\n\n\n\n\n\n\n\n\nThis function gives a quick visual comparison of the numeric variable across groups of the categorical variable. For example, plotting AGEP by SEX shows the distribution of ages for males and females in our subset of the Census data."
  },
  {
    "objectID": "Project1.html#multi-year-functions",
    "href": "Project1.html#multi-year-functions",
    "title": "ST 558 Project 1",
    "section": "Multi-year Functions",
    "text": "Multi-year Functions\nWe also created an extension of our API function that allows us to pull data for multiple years at once. This wrapper function, called get_census_multi(), loops through each requested year, calls our single-year API function, and then combines the results into one tibble. A new column “year” is added so we can easily compare results across time. This makes it possible to analyze trends instead of just a single snapshot.\n\nget_census_multi &lt;- function(years = c(2021, 2022),\n                             num_vars = c(\"AGEP\", \"PWGTP\"),\n                             cat_vars = c(\"SEX\"),\n                             state = \"17\") {\n  \n  valid_years &lt;- years[years &gt;= 2017 & years &lt;= 2022]  # safer range\n  \n  data_list &lt;- list()\n  \n  for (y in valid_years) {\n    message(\"Pulling data for year: \", y)\n    tryCatch({\n      df &lt;- get_census_data(year = y,\n                            num_vars = num_vars,\n                            cat_vars = cat_vars,\n                            state = state)\n      df$year &lt;- y\n      data_list[[as.character(y)]] &lt;- df\n    }, error = function(e) {\n      message(\"Skipping year \", y, \": \", e$message)\n    })\n  }\n  \n  if (length(data_list) == 0) {\n    stop(\"No valid data returned for requested years\")\n  }\n  \n  combined &lt;- dplyr::bind_rows(data_list)\n  class(combined) &lt;- c(\"census\", class(combined))\n  return(combined)\n}\n\n# Example usage\nmulti_test &lt;- get_census_multi(years = c(2019, 2021, 2022))\n\nPulling data for year: 2019\n\n\nPulling data for year: 2021\n\n\nPulling data for year: 2022\n\ncat(\"Pulled multi-year census data with\", nrow(multi_test), \"rows\\n\")\n\nPulled multi-year census data with 379676 rows\n\nhead(multi_test)\n\n# A tibble: 6 × 5\n   AGEP PWGTP SEX   state  year\n  &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt;\n1    22   179 1     17     2019\n2    53     3 1     17     2019\n3    35    87 1     17     2019\n4    42    93 1     17     2019\n5    18    61 1     17     2019\n6    58     4 1     17     2019\n\n\nThe multi-year function successfully combines census data for several years into one dataset, while keeping all the same cleaning steps and structure as our single-year function. By including a year column, it is easy to summarize or plot values over time, which gives us the flexibility to explore changes and patterns across different survey years.\n#Example Analysis We pulled census data for multiple years from State 17 (Illinois) and analyzed the sex distribution of the population within the working-age group. By representing these counts both numerically and with bar graphs, we can clearly see the balance between men and women. This type of analysis can be useful for understanding demographic composition, and it highlights how the data could inform decisions such as workforce planning, community programs, or even policy discussions."
  },
  {
    "objectID": "Project1.html#analysis-working-age-population-by-sex",
    "href": "Project1.html#analysis-working-age-population-by-sex",
    "title": "ST 558 Project 1",
    "section": "Analysis: Working-Age Population by Sex",
    "text": "Analysis: Working-Age Population by Sex\nOur analysis question is to compare the number of men and women in the working-age population. We defined the working population as individuals between the ages of 18 and 64. Using our weighted census data, we calculated the population estimates for men and women in this age group.\n\n# Filter for working-age individuals\nworking_age &lt;- test %&gt;%\n  filter(AGEP &gt;= 18, AGEP &lt;= 64)\n\n# Weighted counts by sex\nworking_summary &lt;- working_age %&gt;%\n  group_by(SEX) %&gt;%\n  summarize(weighted_count = sum(PWGTP, na.rm = TRUE),\n            .groups = \"drop\")\n\nworking_summary\n\n# A tibble: 2 × 2\n  SEX   weighted_count\n  &lt;fct&gt;          &lt;dbl&gt;\n1 1            3875629\n2 2            3827268\n\n\nOur analysis of the working-age population (ages 18–64) shows that Illinois has approximately 3.88 million men and 3.83 million women in this age range. The male working-age population is slightly higher, though both groups are close in size. This demonstrates how our functions can be used to explore demographic patterns within specific subsets of the census data."
  }
]